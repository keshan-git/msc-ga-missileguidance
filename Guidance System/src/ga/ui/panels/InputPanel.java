package ga.ui.panels;


import ga.listeners.StepDetails;
import ga.engine.GAEngine;
import ga.balistic.calculator.DragTrajectoryCalculator;
import static ga.balistic.calculator.DragTrajectoryCalculator.X_ERROR;
import static ga.balistic.calculator.DragTrajectoryCalculator.Y_ERROR;
import ga.balistic.primitive.Position2D;
import ga.balistic.primitive.SingleParam;
import ga.balistic.primitive.Vector2D;
import ga.listeners.StepListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 *
 */
public class InputPanel extends javax.swing.JPanel
{
    private CanvasPanel canvasPanel;
    private SingleParam realTime = new SingleParam(0);
    private DragTrajectoryCalculator dragTrajectoryCalculator;
    private Vector2D selectedSpeed;
    private Timer firingTimer;
    
    private Position2D currentPosition;
    private Vector2D currentSpeed;
    private Position2D laserTargetPosition;
           
    private ExecutorService executerService = Executors.newFixedThreadPool(1);
    
    public InputPanel()
    {
        initComponents();
        stepDetailsPanel.setVisible(false);
    }

    public void setCanvasPanel(CanvasPanel canvasPanel)
    {
        this.canvasPanel = canvasPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        txtWidth = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        txtGunX = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtGunY = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTargetX = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnFire = new javax.swing.JButton();
        txtTargetY = new javax.swing.JTextField();
        btnTargetUpdate = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtNewTargetX = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnLaser = new javax.swing.JButton();
        txtNewTargetY = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnLaserTargetUpdate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        chkDebugMode = new javax.swing.JCheckBox();
        stepDetailsPanel = new ga.ui.panels.StepDetailsPanel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Data Input"));

        jLabel1.setText("World Size : ");

        txtWidth.setText("8000");

        txtHeight.setText("3000");
        txtHeight.setToolTipText("");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(" X ");

        txtGunX.setText("10");

        jLabel4.setText("Position X : ");

        jLabel5.setText("Position Y : ");

        txtGunY.setText("5");

        jLabel3.setText("Gun Position");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGunY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGunX, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtGunX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtGunY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoad))
                .addContainerGap())
        );

        jLabel7.setText("Position X : ");

        jLabel6.setText("Position Y : ");

        txtTargetX.setText("4500");
        txtTargetX.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                txtTargetXKeyReleased(evt);
            }
        });

        jLabel8.setText("Target Position");

        btnFire.setText("Fire");
        btnFire.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnFireActionPerformed(evt);
            }
        });

        txtTargetY.setText("100");
        txtTargetY.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                txtTargetYKeyReleased(evt);
            }
        });

        btnTargetUpdate.setText("Update");
        btnTargetUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnTargetUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(155, 155, 155))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTargetY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTargetX, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFire, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                            .addComponent(btnTargetUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFire)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtTargetX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTargetUpdate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtTargetY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        txtNewTargetX.setText("4700");

        jLabel9.setText("Laser Target Position");

        btnLaser.setText("Laser");
        btnLaser.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnLaserActionPerformed(evt);
            }
        });

        txtNewTargetY.setText("200");

        jLabel10.setText("Position X : ");

        jLabel11.setText("Position Y : ");

        btnLaserTargetUpdate.setText("Update");
        btnLaserTargetUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnLaserTargetUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNewTargetY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNewTargetX, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLaser, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLaserTargetUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtNewTargetX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLaserTargetUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtNewTargetY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLaser))
                .addContainerGap())
        );

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnUpdateActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnResetActionPerformed(evt);
            }
        });

        chkDebugMode.setText("Step Debug Mode");
        chkDebugMode.setToolTipText("");
        chkDebugMode.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkDebugModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stepDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkDebugMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReset))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnUpdate)
                    .addComponent(btnReset)
                    .addComponent(chkDebugMode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, txtHeight, txtWidth});

    }// </editor-fold>//GEN-END:initComponents

    private void btnFireActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnFireActionPerformed
    {//GEN-HEADEREND:event_btnFireActionPerformed
        canvasPanel.setWorldSize(Double.parseDouble(txtWidth.getText()), Double.parseDouble(txtHeight.getText()));

        if (selectedSpeed == null)
        {
            return;
        }
        
        Vector2D initialSpeed = new Vector2D(selectedSpeed.getX(), selectedSpeed.getY());
        Position2D targetPosition = new Position2D(Double.parseDouble(txtTargetX.getText()), Double.parseDouble(txtTargetY.getText()));
        canvasPanel.resetPath();
        realTime.setValue(0);
        
        if ((firingTimer != null) && (firingTimer.isRunning()))
        {
            firingTimer.stop();
        }
        
        firingTimer = new Timer(100, new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                realTime = realTime.add(0.1);
                currentPosition = dragTrajectoryCalculator.getTrajectoryPosition(initialSpeed, realTime);
                currentSpeed = dragTrajectoryCalculator.getTragectorySpeed(initialSpeed, realTime);

                if ((currentPosition.getY() < 0) ||
                        ((Math.abs(currentPosition.getX() - targetPosition.getX()) < X_ERROR) &&
                          (Math.abs(currentPosition.getY() - targetPosition.getY()) < Y_ERROR)))
                {
                    firingTimer.stop();
                }
                
                SwingUtilities.invokeLater(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        canvasPanel.addPosition2D(currentPosition);
                        canvasPanel.setSpeed(currentSpeed);
                    }
                });
            }
        });
        
        firingTimer.start();
        setTargetPositionEnabled(false);
    }//GEN-LAST:event_btnFireActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoadActionPerformed
    {//GEN-HEADEREND:event_btnLoadActionPerformed
        
        SingleParam initialHeight = new SingleParam(Double.parseDouble(txtGunY.getText()));
        SingleParam mass = new SingleParam(46 * 1000);
        SingleParam massDensity = new SingleParam(995.65);
        SingleParam dragCoefficient = new SingleParam(0.5);
        SingleParam referenceArea = new SingleParam(Math.PI * 0.155 * 0.155);

        dragTrajectoryCalculator = new DragTrajectoryCalculator(
                initialHeight, mass, massDensity, dragCoefficient, referenceArea);

        JOptionPane.showMessageDialog(canvasPanel, "Calculating Initial Velocity....", "Please Wait", JOptionPane.INFORMATION_MESSAGE);

        Future<Vector2D> result = executerService.submit(new Callable<Vector2D>()
        {
            @Override
            public Vector2D call() throws Exception
            {
                selectedSpeed = null;
                Position2D initialPosition = new Position2D(Double.parseDouble(txtGunX.getText()), Double.parseDouble(txtGunY.getText()));
                dragTrajectoryCalculator.setInitialPosition(initialPosition);
                Position2D targetPosition = new Position2D(Double.parseDouble(txtTargetX.getText()), Double.parseDouble(txtTargetY.getText()));
                Vector2D speed = dragTrajectoryCalculator.calculateInitialSpeed(initialPosition, targetPosition);

                return speed;
            }
        });
            
        try
        {
            Vector2D selectedVelosity = result.get();
            
            if (selectedVelosity == null)
            {
                JOptionPane.showMessageDialog(canvasPanel, "Given target is not reachable.", "Unreachable Target", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(canvasPanel, "Gun loading completed.", "Done Loading", JOptionPane.INFORMATION_MESSAGE);
                selectedSpeed = new Vector2D(selectedVelosity.getX(), selectedVelosity.getY());
                canvasPanel.setInitialSpeed(selectedSpeed);
                setGunPositionEnabled(false);
            }
        }
        catch (InterruptedException ex){}
        catch (ExecutionException ex){}   
        
        canvasPanel.setInitialPosition(dragTrajectoryCalculator.getInitialPosition());
    }//GEN-LAST:event_btnLoadActionPerformed

    private void txtTargetXKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtTargetXKeyReleased
    {//GEN-HEADEREND:event_txtTargetXKeyReleased
        try
        {
            double targetX = Double.parseDouble(txtTargetX.getText());
            double targetY = Double.parseDouble(txtTargetY.getText());
            canvasPanel.setTargetPosition2D(new Position2D(targetX, targetY));
        }
        catch(Exception ex){}
    }//GEN-LAST:event_txtTargetXKeyReleased

    private void txtTargetYKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtTargetYKeyReleased
    {//GEN-HEADEREND:event_txtTargetYKeyReleased
        try
        {
            double targetX = Double.parseDouble(txtTargetX.getText());
            double targetY = Double.parseDouble(txtTargetY.getText());
            canvasPanel.setTargetPosition2D(new Position2D(targetX, targetY));
        }
        catch(Exception ex){}
    }//GEN-LAST:event_txtTargetYKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnUpdateActionPerformed
    {//GEN-HEADEREND:event_btnUpdateActionPerformed
        canvasPanel.setWorldSize(Double.parseDouble(txtWidth.getText()), Double.parseDouble(txtHeight.getText()));
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnTargetUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTargetUpdateActionPerformed
    {//GEN-HEADEREND:event_btnTargetUpdateActionPerformed
        try
        {
            double targetX = Double.parseDouble(txtTargetX.getText());
            double targetY = Double.parseDouble(txtTargetY.getText());
            canvasPanel.setTargetPosition2D(new Position2D(targetX, targetY));
        }
        catch(Exception ex){}
    }//GEN-LAST:event_btnTargetUpdateActionPerformed

    private void btnLaserTargetUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLaserTargetUpdateActionPerformed
    {//GEN-HEADEREND:event_btnLaserTargetUpdateActionPerformed
        try
        {
            double targetX = Double.parseDouble(txtNewTargetX.getText());
            double targetY = Double.parseDouble(txtNewTargetY.getText());
            laserTargetPosition = new Position2D(targetX, targetY);
            
            canvasPanel.setLaserTargetPosition2D(laserTargetPosition);
        }
        catch(Exception ex){}
    }//GEN-LAST:event_btnLaserTargetUpdateActionPerformed

    private void btnLaserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLaserActionPerformed
    {//GEN-HEADEREND:event_btnLaserActionPerformed
        firingTimer.stop();
        canvasPanel.setGuidencePoint(new Position2D(currentPosition));
                
        GAEngine gaEngine = new GAEngine(currentPosition, dragTrajectoryCalculator, laserTargetPosition);
        gaEngine.initGA(currentSpeed);

        Vector2D adjustedVelocity;
        if (!chkDebugMode.isSelected())
        {
            adjustedVelocity = gaEngine.getBestFittedSpeed();
        }
        else
        {
            stepDetailsPanel.clearStepDetails();
            gaEngine.addStepListener(new StepListener()
            {
                @Override
                public void onStepChanged(StepDetails stepDetails)
                {
                    stepDetailsPanel.addStepDetails(stepDetails);
                } 
            });

            adjustedVelocity = gaEngine.getBestFittedSpeedWithSteps();    
        }

        System.out.println(currentSpeed); 
        System.out.println(adjustedVelocity); 
        realTime.setValue(0);
        
        if ((firingTimer != null) && (firingTimer.isRunning()))
        {
            firingTimer.stop();
        }
        
        firingTimer = new Timer(100, new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent ae)
            {
                realTime = realTime.add(0.1);
                currentPosition = dragTrajectoryCalculator.getTrajectoryPosition(adjustedVelocity, realTime);
                currentSpeed = dragTrajectoryCalculator.getTragectorySpeed(adjustedVelocity, realTime);

                if ((currentPosition.getY() < 0) ||
                        ((Math.abs(currentPosition.getX() - laserTargetPosition.getX()) < X_ERROR) &&
                          (Math.abs(currentPosition.getY() - laserTargetPosition.getY()) < Y_ERROR)))
                {
                    firingTimer.stop();
                }
                
                SwingUtilities.invokeLater(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        canvasPanel.addPosition2D(currentPosition);
                        canvasPanel.setSpeed(currentSpeed);
                    }
                });
            }
        });
        
        firingTimer.start();
        setNewTargetPositionEnabled(false);   
    }//GEN-LAST:event_btnLaserActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnResetActionPerformed
    {//GEN-HEADEREND:event_btnResetActionPerformed
        setGunPositionEnabled(true);
        setTargetPositionEnabled(true);
        setNewTargetPositionEnabled(true);
        
        canvasPanel.resetCanvs();
        if ((firingTimer != null) && (firingTimer.isRunning()))
        {
            firingTimer.stop();
        }
        dragTrajectoryCalculator = null;
    }//GEN-LAST:event_btnResetActionPerformed

    private void chkDebugModeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkDebugModeActionPerformed
    {//GEN-HEADEREND:event_chkDebugModeActionPerformed
        stepDetailsPanel.setVisible(chkDebugMode.isSelected());
        revalidate();
    }//GEN-LAST:event_chkDebugModeActionPerformed

    private void setGunPositionEnabled(boolean flag)
    {
        txtGunX.setEnabled(flag);
        txtGunY.setEnabled(flag);
        btnLoad.setEnabled(flag);
    }
    
    private void setTargetPositionEnabled(boolean flag)
    {
        txtTargetX.setEnabled(flag);
        txtTargetY.setEnabled(flag);
        btnTargetUpdate.setEnabled(flag);
        btnFire.setEnabled(flag);
    }
    
    private void setNewTargetPositionEnabled(boolean flag)
    {
        txtNewTargetX.setEnabled(flag);
        txtNewTargetY.setEnabled(flag);
        btnLaserTargetUpdate.setEnabled(flag);
        btnLaser.setEnabled(flag);
        chkDebugMode.setEnabled(flag);
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFire;
    private javax.swing.JButton btnLaser;
    private javax.swing.JButton btnLaserTargetUpdate;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTargetUpdate;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chkDebugMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private ga.ui.panels.StepDetailsPanel stepDetailsPanel;
    private javax.swing.JTextField txtGunX;
    private javax.swing.JTextField txtGunY;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtNewTargetX;
    private javax.swing.JTextField txtNewTargetY;
    private javax.swing.JTextField txtTargetX;
    private javax.swing.JTextField txtTargetY;
    private javax.swing.JTextField txtWidth;
    // End of variables declaration//GEN-END:variables
}
